#!/usr/bin/env node
import { existsSync, mkdirSync, readdirSync, readFileSync, writeFileSync } from "fs";
import { resolve } from "path";
import loadConfig from "tailwindcss/lib/lib/load-config.js";
import { logger } from "./logger.js";
import generateCode from "./generate-code.js";

const context = {
  package: JSON.parse(readFileSync(resolve(import.meta.dirname, "../package.json")).toString()),
  cssFilePath: process.argv[2],
  tailwindConfigPath: "",
  outputDirectory: ""
};

async function main():Promise<void>{
  logger.info(context.package['version']);
  loadContext();

  const R = generateCode(context.package['name'], await loadConfig.loadConfig(resolve(process.cwd(), context.tailwindConfigPath)));

  writeFileSync(resolve(context.outputDirectory, "index.tsx"), R);
  writeFileSync(resolve(context.outputDirectory, "client.ts"), [
    `// Auto-generated by ${context.package['name']}`,
    "/* eslint-disable */",
    '"use client";',
    'import { loadTailwindBase } from "@devheerim/tailwind-base";',
    'import { tailwindBaseConfig } from ".";',
    'import React from "react";',
    "export default function ClientTailwindBaseInitializer(){",
    "  React.useMemo(() => loadTailwindBase(tailwindBaseConfig), []);",
    "  return null;",
    "}"
  ].join('\n'));

  const configPath = resolve(context.outputDirectory, "config.ts");
  if(!existsSync(configPath)) writeFileSync(configPath, [
    `// Auto-generated by ${context.package['name']}`,
    'import type { TailwindBaseConfig } from "@devheerim/tailwind-base/lib";',
    "export default {",
    "  postprocessors: []",
    '} as Partial<TailwindBaseConfig>;'
  ].join('\n'));
  logger.success("Generated!")['Size'](R.length);
}
main();

function loadContext():void{
  if(!context.cssFilePath){
    logger.error("CSS file path not set");
    process.exit(1);
  }
  if(!existsSync(context.cssFilePath)){
    logger.error("CSS file not found")['Path'](context.cssFilePath);
    process.exit(1);
  }
  const cwd = process.cwd();
  const tailwindConfigPath = readdirSync(cwd).find(v => /^tailwind\.config\.\w+$/.test(v));
  if(!tailwindConfigPath){
    logger.error("Tailwind config file not found");
    process.exit(1);
  }
  context.tailwindConfigPath = resolve(cwd, tailwindConfigPath);
  context.outputDirectory = existsSync(resolve(cwd, "src")) ? resolve(cwd, "src/tailwind-base") : resolve(cwd, "tailwind-base");
  if(existsSync(context.outputDirectory)) return;
  mkdirSync(context.outputDirectory);
}